<?php
/**
 * Created V/20/07/2012
 * Updated D/14/10/2012
 * Version 4
 *
 * Copyright 2012 | Fabrice Creuzot (luigifab) <code~luigifab~info>
 * https://redmine.luigifab.info/projects/magento/wiki/modules
 *
 * This program is free software, you can redistribute it or modify
 * it under the terms of the GNU General Public License (GPL) as published
 * by the free software foundation, either version 2 of the license, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but without any warranty, without even the implied warranty of
 * merchantability or fitness for a particular purpose. See the
 * GNU General Public License (GPL) for more details.
 */

require_once('downloader/lib/Mage/Connect/Singleconfig.php');

class Luigifab_Modules_Helper_Data extends Mage_Core_Helper_Abstract {

	public function getVersion() {
		return (string) Mage::getConfig()->getModuleConfig('Luigifab_Modules')->version;
	}


	// #### ? ####################################################################### public ### //
	// = révision : 5
	// » Récupère la liste des modules à partir de la configuration XML de Magento
	// » Demande aussi la liste des modules installés à partir du downloader
	public function getModulesList($core = false) {

		$items = Mage::getConfig()->getNode('modules')->children();
		$connect = $this->getModulesFromConnect();
		$modules = array();

		echo '<pre>';print_r($connect);echo '</pre>';

		foreach ($items as $item) {

			$codepoolNode = (string) $item->codePool;
			$versionNode = (string) $item->version;
			$updateNode = (string) $item->update;
			$check = array();

			echo '<br />'.strtolower($item->getName());

			if (strlen($updateNode) > 5)
				$check = $this->getLastVersionFromModule($item->getName(), $updateNode);
			else if (array_key_exists(strtolower($item->getName()), $connect))
				$check = $this->getLastVersionFromConnect($connect['fileToCheck']);

			if (empty($check)) {
				$modules[$codepoolNode][] = array(
					'name' => str_replace('_', '/', $item->getName()),
					'currentVersion' => $versionNode,
					'lastVersion' => false,
					'url' => false
				);
			}
			else {
				$modules[$codepoolNode][] = array(
					'name' => str_replace('_', '/', $item->getName()),
					'currentVersion' => $versionNode,
					'lastVersion' => $check['lastVersion'],
					'url' => $check['url']
				);
			}

		}

		if (!$core)
			unset($modules['core']);

		return $modules;
	}


	// #### Liste des modules du downloader ######################################## private ### //
	// = révision : 1
	// » Extrait la liste des modules installés à partir du fichier cache.cfg du downloader
	// » Renvoie un tableau avec toutes les informations nécessaires (nom/version/releases.xml)
	private function getModulesFromConnect() {

		$modules = array();

		if (is_file('downloader/cache.cfg')) {

			$data = new Mage_Connect_Singleconfig('downloader/cache.cfg');
			$data = $data->getData();

			foreach ($data as $channels) {

				foreach ($channels as $channel) {

					if (isset($channel['packages']) && is_array($channel['packages']) && !empty($channel['packages'])) {

						foreach ($channel['packages'] as $module) {

							$modules[strtolower($module['name'])] = array(
								'name' => $module['name'],
								'currentVersion' => $module['version'],
								'fileToCheck' => $channel['uri'].'/'.$module['name'].'/releases.xml'
							);
						}
					}
				}
			}
		}

		return $modules;
	}


	// #### ? ############################################################## curl ## private ### //
	// = révision : 4
	// » Récupère la dernière version du module
	// » Utilise la version disponible à l'adresse du fichier de mise à jour fournie par le module
	private function getLastVersionFromModule($name, $url) {

		try {
			$curl = curl_init();
			curl_setopt($curl, CURLOPT_URL, $url);
			curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
			$response = curl_exec($curl);
			curl_close($curl);

			if (strpos($response, '<modules>') !== false) {

				$xml = new DomDocument();
				$xml->loadXML($response);

				foreach ($xml->getElementsByTagName(strtolower($name)) as $module) {

					return array('lastVersion' => $module->getElementsByTagName('version')->item(0)->firstChild->nodeValue, 'url' => $module->getElementsByTagName('url')->item(0)->firstChild->nodeValue);
				}

				return array();
			}
		}
		catch (Exception $e) {
			Mage::log($e->getMessage().' for '.$url.' ('.$name.')', Zend_Log::ERR);
		}

		return false;
	}


	// #### ? ############################################################## curl ## private ### //
	// = révision : 1
	// » Récupère la dernière version du module
	// » Utilise la version disponible à l'adresse du fichier packages.xml du connect du module
	private function getLastVersionFromConnect($url) {

		try {exit;
			$curl = curl_init();
			curl_setopt($curl, CURLOPT_URL, $url);
			curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
			$response = curl_exec($curl);
			curl_close($curl);

			if (strpos($response, '<data>') !== false) {

				$xml = new DomDocument();
				$xml->loadXML($response);

				$last = 0;

				foreach ($xml->getElementsByTagName('v') as $version) {

					if (version_compare($version->item(0)->firstChild->nodeValue, $last, '>'))
						$last = $version;
				}

				if ($last > 0)
					return array('lastVersion' => $last);

				return array();
			}
		}
		catch (Exception $e) {
			Mage::log($e->getMessage().' for '.$url.' ('.$name.')', Zend_Log::ERR);
		}

		return false;
	}
}